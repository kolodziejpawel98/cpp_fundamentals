Plan szczegółowy na Dzień 1

Temat: RAII + Rule of 0/3/5
⏱ Czas: ~60 min
Krok 1 — Teoria (15 min)

    Przeczytaj o RAII:

        RAII = Resource Acquisition Is Initialization.

        Zasoby (np. plik, pamięć, muteks) są przejmowane w konstruktorze, zwalniane w destruktorze.

        Dzięki temu nie trzeba pamiętać o close(), free(), delete — robi to destruktor.

    Przypomnij Rule of 0/3/5:

        0: Klasa korzysta z gotowych obiektów RAII → kompilator generuje wszystko.

        3: Potrzebny destruktor, konstruktor kopiujący i operator przypisania (np. przy surowym wskaźniku).

        5: Dodatkowo konstruktor przenoszący i operator przypisania przenoszącego (C++11+).

📖 Źródło do przeczytania:

    Stroustrup, The C++ Programming Language — rozdział o RAII.

    Lub krócej: cppreference → RAII.

Krok 2 — Ćwiczenie praktyczne (35 min)

    Napisz klasę FileWrapper:

        Konstruktor: otwiera plik w trybie odczytu.

        Destruktor: zamyka plik.

        Dodaj prostą metodę readLine().

    Testuj kopiowanie:

        Spróbuj skompilować kod kopiujący FileWrapper.

        Zobacz, co wygeneruje kompilator i czy to działa poprawnie.

    Dodaj obsługę przenoszenia:

        Konstruktor przenoszący — przejmij uchwyt pliku.

        Operator przypisania przenoszącego.

    Zrób krótki test:

        Utwórz FileWrapper f1("plik.txt").

        Przekaż go do funkcji przez wartość — zobacz, czy przenoszenie działa.

Krok 3 — Refleksja (10 min)

    Wypisz w punktach:

        Co by się stało, gdyby destruktor nie zamykał pliku?

        Jakie masz zalety przenoszenia w tym przykładzie?

        Czy można byłoby tę klasę napisać w myśl Rule of 0? (np. przez użycie std::ifstream jako pola).

Jeżeli chcesz, to mogę Ci teraz rozpisać Dzień 2 w tym samym, super-szczegółowym formacie, żebyś miał cały tydzień gotowy bez zgadywania, co robić.
Chcesz?
